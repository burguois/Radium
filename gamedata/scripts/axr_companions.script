--[[	axr_companions

by Alundaio

	Copyright (C) 2012 Alundaio
	This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
-]]

--TODO: Make it so patrol/waiting npcs do not follow actor to new levels. Maybe set their own squad id as target?

ask_anyone_to_be_companion = false
allow_story_squads = false
max_actor_squad_size = 0

companion_squads = {}
------------------------------------------
-- Localized Functions
------------------------------------------
local function on_fighting_actor(npc)
	--alun_utils.debug_write(alun_utils.sr("axr_companions.on_fighting_actor"))
	if (db.actor:has_info("axr_has_companion")) then
		for i=1,max_actor_squad_size do
			local c = alun_utils.load_var(db.actor,"companion_"..i,nil)
			if (c) then
				alun_utils.set_squad_relation_to_squad(level.object_by_id(c),npc,game_object.enemy)
			end
		end
	end
	
	if (IsStalker(npc)) then
		for id,squad in pairs(companion_squads) do 
			xr_combat_ignore.safe_zone_npcs[id] = nil
			if (squad and squad.commander_id) then
				for k in squad:squad_members() do
					local member = db.storage[k.id] and db.storage[k.id].object
					if (member and member:alive()) then
						member:set_relation(game_object.enemy,npc)
						npc:set_relation(game_object.enemy,member)
					end
				end
			end
		end
	end
end

local function squad_on_npc_death(squad,se_npc)
	--alun_utils.debug_write(alun_utils.sr("axr_companions.squad_on_npc_death"))
	if (se_npc and alife():has_info(se_npc.id,"npcx_is_companion") ) then
		for i=1,max_actor_squad_size do
			local c = alun_utils.load_var(db.actor,"companion_"..i,nil)
			if (c == se_npc.id) then
				alun_utils.save_var(db.actor,"companion_"..i,nil)
			end
		end
		if (get_companion_count() < 1) then
			db.actor:disable_info_portion("axr_has_companion")
		end
		if (squad:npc_count() == 0) then 
			companion_squads[squad.id] = nil
		end
	end
end

local function squad_on_unregister(squad)
	companion_squads[squad.id] = nil
end

local function squad_can_switch_offline(squad)
	local id = squad:commander_id()
	if (id and alife():has_info(id,"npcx_is_companion")) then
		return false
	end
end

local function squad_on_update(squad)
	--alun_utils.debug_write(alun_utils.sr("axr_companions.squad_on_update - heli_enemy_flag"))
	local id = squad:commander_id()
	local sim = alife()
	if (id and sim:has_info(id,"npcx_is_companion")) then
		squad.scripted_target = "actor"
		companion_squads[squad.id] = squad
		if (alun_utils.load_var(db.actor,"heli_enemy_flag") == true) then
			for k in squad:squad_members() do
				if (db.storage[k.id]) then
					db.storage[k.id].heli_enemy_flag = true
				end
			end
		end
	end
end

local function npc_on_net_spawn(npc,se_npc)
	--alun_utils.debug_write(alun_utils.sr("action_new_combat:execute end"))
	if (npc and npc:has_info("npcx_is_companion")) then
		setup_companion_logic(npc)
	end
end

local function on_level_changing()
	local squad
	local sim = alife()
	local se_actor = sim:actor()
	for id,v in pairs(companion_squads) do 
		squad = sim:object(id)
		if (squad and companion_squad_can_teleport(squad)) then 
			alun_utils.teleport_squad(squad,se_actor.m_game_vertex_id,se_actor.m_level_vertex_id,se_actor.position)
		end
	end
end

---------------------------------
-- Register Callbacks
---------------------------------
function on_game_start()
	local ini = ini_file("ai_tweaks\\axr_companions.ltx")
	Enabled = alun_utils.read_from_ini(ini,"main","enable","bool",false)
	if not (Enabled) then return end
	callback_register("npc_on_fighting_actor",on_fighting_actor)
	callback_register("squad_on_update",squad_on_update)
	callback_register("squad_on_npc_death",squad_on_npc_death)
	callback_register("squad_on_unregister",squad_on_unregister)
	callback_register("squad_can_switch_offline",squad_can_switch_offline)
	callback_register("npc_on_net_spawn",npc_on_net_spawn)
	callback_register("on_level_changing",on_level_changing)

	DisabledFactions = alun_utils.parse_list(ini,"main","disabled_factions",true)
	ask_anyone_to_be_companion = alun_utils.read_from_ini(ini,"main","anyone_as_companion","bool",false)
	allow_story_squads = alun_utils.read_from_ini(ini,"main","allow_story_squads","bool",false)
	max_actor_squad_size = alun_utils.read_from_ini(ini,"main","max_actor_squad_size","float",3)
end

function companion_squad_can_teleport(squad)
	local id = squad:commander_id()
	if (id and alife():has_info(id,"npcx_beh_patrol_mode") or alife():has_info(id,"npcx_beh_wait")) then
		return false
	end
	return true
end 

function get_companion_count()
	local count = 0
	for i=1,max_actor_squad_size do
		local c = alun_utils.load_var(db.actor,"companion_"..i,nil)
		if (c) then
			count = count + 1
		end
	end
	return count
end

function list_actor_squad_by_id()
	local t = {}
	for i=1,max_actor_squad_size do
		local c = alun_utils.load_var(db.actor,"companion_"..i,nil)
		if (c) then
			table.insert(t,c)
		end
	end
	return t
end 

function setup_companion_logic(npc)
	local ltx = ini_file("scripts\\beh_companion.ltx")
	local ltx_name = "scripts\\beh_companion.ltx"

	xr_logic.configure_schemes(npc, ltx, ltx_name, modules.stype_stalker, "logic", "")

	local sect = xr_logic.determine_section_to_activate(npc, ltx, "logic", db.actor)
	if utils.get_scheme_by_section("logic") == "nil" then
		printf("[smart_terrain %s] section=%s, don't use section 'nil'!", self:name(), sect)
	end

	--printf("npc=%s ltx=%s sect=%s prefix=%s",npc:name(),ltx_name,sect,job.prefix_name or self:name())
	xr_logic.activate_by_section(npc, ltx, sect, "", false)
end 

function add_special_task_npc_to_actor_squad(npc)
	local id = npc:id()
	local sim = alife()
	local se_npc = sim:object(id)
	local unreg_id = se_npc.m_smart_terrain_id
	if (unreg_id ~= 65535) then
		local unreg = sim:object(unreg_id)
		if (unreg) then
			unreg:unregister_npc(se_npc)
		end
	end
	npc:inactualize_patrol_path()
	npc:give_info_portion("npcx_is_companion")
	axr_logic.set_new_scheme_and_logic(npc,"beh","beh@base","logic",nil,"scripts\\beh_companion.ltx")
	setup_companion_logic(npc)
end 

function add_to_actor_squad(npc)
	local inserted
	local id = npc:id()
	for i=1,max_actor_squad_size do
		local c = alun_utils.load_var(db.actor,"companion_"..i,nil)
		if not (c) then
			alun_utils.save_var(db.actor,"companion_"..i,id)
			--alun_utils.debug_write("add to actor squad %s in slot %s",npc:name(),i)
			inserted = true
			break
		end
	end

	if not (inserted) then
		return
	end

	if not ( db.actor:has_info("axr_has_companion") ) then
		db.actor:give_info_portion("axr_has_companion")
	end

	local sim = alife()
	local se_npc = sim:object(id)
	local unreg_id = se_npc:smart_terrain_id()
	if (unreg_id ~= 65535) then
		local unreg = sim:object(unreg_id)
		if (unreg) then
			unreg:unregister_npc(se_npc)
		end
	end

	npc:give_info_portion("npcx_is_companion")
	axr_logic.set_new_scheme_and_logic(npc,"beh","beh@base","logic",nil,"scripts\\beh_companion.ltx")
	--alun_utils.debug_write("Inserted %s into actor squad",npc:name())
end

function remove_from_actor_squad(npc)
	local squad = get_object_squad(npc)
	if (squad) then 
		squad.scripted_target = nil
	end 
	
	npc:disable_info_portion("npcx_is_companion")
	axr_logic.restore_scheme_and_logic(npc)

	local count = 0
	for i=1,max_actor_squad_size do
		local c = alun_utils.load_var(db.actor,"companion_"..i,nil)
		if (c == npc:id()) then
			alun_utils.save_var(db.actor,"companion_"..i,nil)
		end
		count = count + 1
	end
	if (get_companion_count() < 1) then
		db.actor:disable_info_portion("axr_has_companion")
	end
end

function can_join_actor(npc)
	local comm = character_community(npc)
	if (DisabledFactions[comm]) then
		return false
	end

	local squad = get_object_squad(npc)
	if squad ~= nil and squad:commander_id() ~= npc:id() then
		return false
	end

	if (get_companion_count() + alun_utils.get_squad_count(npc) <= max_actor_squad_size) then
		return true
	end

	return false
end

--NOTE combat_type is screwed up. It's also crap compared to engine combat
function set_companion_combat_type_camper(npc)
	npc:disable_info_portion("npcx_beh_combat_tactics_monolith")
	npc:give_info_portion("npcx_beh_combat_tactics_camper")
end

function set_companion_combat_type_monolith(npc)
	npc:disable_info_portion("npcx_beh_combat_tactics_camper")
	npc:give_info_portion("npcx_beh_combat_tactics_monolith")
end

function set_companion_combat_type_default(npc)
	npc:disable_info_portion("npcx_beh_combat_tactics_monolith")
	npc:disable_info_portion("npcx_beh_combat_tactics_camper")
end

function set_companion_to_wait_state(npc)
	npc:give_info_portion("npcx_beh_wait")
end

function set_companion_to_follow_state(npc)
	npc:disable_info_portion("npcx_beh_wait")
	npc:disable_info_portion("npcx_beh_hide_in_cover")
end

function set_companion_to_attack_state(npc)
	npc:disable_info_portion("npcx_beh_ignore_combat")
	npc:disable_info_portion("npcx_beh_ignore_actor_enemies")
end

function set_companion_to_ignore_combat_state(npc)
	npc:give_info_portion("npcx_beh_ignore_combat")
	npc:give_info_portion("npcx_beh_ignore_actor_enemies")
end

function set_companion_to_attack_only_actor_combat_enemy_state(npc)
	npc:give_info_portion("npcx_beh_ignore_combat")
	npc:disable_info_portion("npcx_beh_ignore_actor_enemies")
end

function set_companion_to_stealth_substate(npc)
	npc:give_info_portion("npcx_beh_substate_stealth")
end

function set_companion_to_relax_substate(npc)
	npc:give_info_portion("npcx_beh_substate_relax")
end

function set_companion_to_default_substate(npc)
	npc:disable_info_portion("npcx_beh_substate_stealth")
	npc:disable_info_portion("npcx_beh_substate_relax")
end

function switch_companion_distance(npc)
	if ( npc:has_info("npcx_beh_distance_far") ) then
		npc:disable_info_portion("npcx_beh_distance_far")
	else
		npc:give_info_portion("npcx_beh_distance_far")
	end
end

function set_companion_hide_in_cover(npc)
	npc:give_info_portion("npcx_beh_hide_in_cover")
	npc:disable_info_portion("npcx_beh_wait")
end

function switch_companion_patrol_mode(npc)
	if ( npc:has_info("npcx_beh_patrol_mode") ) then
		npc:disable_info_portion("npcx_beh_patrol_mode")
	else
		npc:give_info_portion("npcx_beh_patrol_mode")
	end
end

function switch_companion_gather_items(npc)
	if ( npc:has_info("npcx_beh_gather_items") ) then
		npc:disable_info_portion("npcx_beh_gather_items")
	else
		npc:give_info_portion("npcx_beh_gather_items")
	end
end

function switch_companion_loot_corpses(npc)
	if ( npc:has_info("npcx_beh_loot_corpses") ) then
		npc:disable_info_portion("npcx_beh_loot_corpses")
	else
		npc:give_info_portion("npcx_beh_loot_corpses")
	end
end

function companion_remove_waypoints(npc)
	npc:disable_info_portion("npcx_beh_patrol_mode")
	local i = 1
	local p = alun_utils.load_var(npc,"pathpoint"..tostring(i))
	while p do 
		alun_utils.save_var(npc,"pathpoint"..tostring(i),nil)
		i = i + 1
		p = alun_utils.load_var(npc,"pathpoint"..tostring(i))
	end
end

function companion_add_waypoints(npc)
	local i = 1
	local p = alun_utils.load_var(npc,"pathpoint"..tostring(i))
	while p do 
		i = i + 1
		p = alun_utils.load_var(npc,"pathpoint"..tostring(i))
	end
	local pos = db.actor:position()
	local s = "5000,patrol | pos:"..pos.x..","..pos.y..","..pos.z
	alun_utils.save_var(npc,"pathpoint"..tostring(i),s)
end
