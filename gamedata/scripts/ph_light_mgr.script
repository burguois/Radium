--[[ ----------------------------------------------------------------------------------------------
 File       : ph_light_mgr.script
 Description: scheme: "..."
 Copyright  : 2008 © LA-team
 Author     : barin (2008-08-19)
 Editors    : gr1ph00n, ddraig
 Last edit  : 16.12.2013 [vintar]
--]] ----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local BLINK_PERIOD  = 600
local BLOWOUT_FORCE = 50

local LIGHTS_ON_BLOW = {"blink", "off"}
local BLOW_BULB_SND  = "material\\glass\\glass_fall04hl"

local PARTICLES = {
	"destroy_fx\\destroy_el_box",
	"hit_fx\\hit_glass_01",
	"hit_fx\\hit_glass_01a"
}
local OSC_DATA =  {
	joint  = "provod",
	period = 500,
	force  = 1.5,
	angle  = 0
}


--/ ------------------------------------------------------------------
--/ CONSTRUCTION SCHEME
--/------------------------------------------------------------------------------------------------
class "action_lights_handler"
--/------------------------------------------------------------------------------------------------
function action_lights_handler:__init(obj, st)
	self.object  = obj
	self.st      = st
	self.log     = st.log
	self.enabled = false
	
	self.lights_on     = nil
	self.on_blowout    = nil
	self.lights_status = nil
	self.blow_timer    = nil
end
--/------------------------------------------------------------------
--/ RESET SCHEME
--/------------------------------------------------------------------
function action_lights_handler:reset_scheme()

	self.lights_on  = self.st.lights_on
	self.on_blowout = self.st.on_blowout
	
	self.lights_status = nil
	self.blow_timer    = nil
	
	if self.st.oscillator then
		self.osc_base_force = self.st.force
		self.oscillator = ph_oscillate.action_oscillator(self.object, self.st)
		self.oscillator:reset_scheme()
	end
	
	self.enabled = true
end
--/------------------------------------------------------------------
--/ UPDATE
--/------------------------------------------------------------------
function action_lights_handler:update()
	if not self.enabled then
		self:reset_scheme()
		return
	end
	
	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		return
	end
	
	if self.oscillator then
		self.oscillator:update()
	end
	
	if surge_manager.is_emp() then
		if self.oscillator ~= nil then
			if self.st.force == self.osc_base_force then
				self.st.force = BLOWOUT_FORCE
				self.oscillator:reset_scheme()
			end
		end
		self:handle_blowout()
		return
	else
		if self.blow_timer ~= nil then
			self.blow_timer = nil
			if self.oscillator ~= nil then
				self.st.force = self.osc_base_force
				self.oscillator:reset_scheme()
			end
		end
	end
	
	if self.lights_on == "always_off" then
		self:switch_lights("turn_off")
		return
	end
	
	if self.lights_on == "blink" then
		self:handle_blinking()
		return
	end
	
	if not utils.is_day() then
		if self.lights_on == "night" then
			self:switch_lights("turn_on")
		elseif self.lights_on == "day" then
			self:switch_lights("turn_off")
		else
			self:switch_lights("turn_on") --/ "always_on"
		end
	else
		if self.lights_on == "night" then
			self:switch_lights("turn_off")
		elseif self.lights_on == "day" then
			self:switch_lights("turn_on")
		else
			self:switch_lights("turn_on") --/ "always_on"
		end
	end
end
--/------------------------------------------------------------------
--/ SERVICE FUNCTIONs
--/------------------------------------------------------------------
function action_lights_handler:handle_blinking()
	if math.random(1, 1000) % 2 == 0 then
		self:switch_lights("turn_off")
	else
		self:switch_lights("turn_on")
	end
end

function action_lights_handler:handle_blowout()
	local action = true
	if surge_manager.is_emp() then
		if surge_manager.is_finished() then
			action = false
		end
	end
	
	if action then
		if self.blow_timer == nil then
			self.blow_timer = time_global() + math.random(BLINK_PERIOD)
		end
		if self.on_blowout == "blink" then
			if self.blow_timer <= time_global() then
				if math.random(1, 1000) % 2 == 0 then
					self:switch_lights("turn_off")
				else
					self:switch_lights("turn_on")
				end
				self.blow_timer = time_global() + math.random(BLINK_PERIOD)
			end
		elseif self.on_blowout == "off" then
			if self.lights_status == "turn_on" then
				if not self.lamp_part then
					self.lamp_part = particles_object(PARTICLES[math.random(1, #PARTICLES)])
					local pos = nil --self.object:bone_position("bone_lamp")
					pos = self.object:position()
					self.lamp_part:play_at_pos(pos)
					sound_object(BLOW_BULB_SND):play_at_pos(self.object, pos)
					self:switch_lights("turn_off")
				elseif not self.lamp_part:playing() then
					self.lamp_part = nil
				end
			end
		else
			self:switch_lights("turn_on")
		end
	else
		self:switch_lights("turn_off")
	end
end

function action_lights_handler:switch_lights(action)
	if self.lights_status == action then
		return
	end
	
	if action == "turn_on" then
		self.object:get_hanging_lamp():turn_on()
	else
		self.object:get_hanging_lamp():turn_off()
	end
	self.lights_status = action
end

function add_to_binder(npc, ini, scheme, section, storage)
	--	printf("DEBUG: add_to_binder: scheme='%s', section='%s'", scheme, section)
	
	local new_action = action_lights_handler(npc, storage)

	xr_logic.subscribe_action_for_events(npc, storage, new_action)

end

function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	
	st.logic            = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	
	st.lights_on  = utils.cfg_get_string(ini, section, "lights_on",  "night", false, "")
	st.on_blowout = utils.cfg_get_string(ini, section, "on_blowout", "random", false, "")
	st.oscillator = utils.cfg_get_bool  (ini, section, "oscillator", false, false)
	
	if st.oscillator then
		st.joint  = utils.cfg_get_string(ini, section, "joint",  OSC_DATA["joint"], false, "")
		st.period = utils.cfg_get_number (ini, section, "period", OSC_DATA["period"], false, 0)
		st.force  = utils.cfg_get_number(ini, section, "force",  OSC_DATA["force"], false, 0)
		st.angle  = utils.cfg_get_number(ini, section, "angle",  OSC_DATA["angle"], false, 0)
	end
	
	if st.on_blowout == "random" then
		st.on_blowout = LIGHTS_ON_BLOW[math.random(1,2)]
	end
	
	if st.lights_on ~= "night" and st.lights_on ~= "day" and st.lights_on ~= "always_on" and st.lights_on ~= "always_off" and st.lights_on ~= "blink" then
		st.lights_on = "night"
	end
	if st.on_blowout ~= "blink" and st.on_blowout ~= "on" and st.on_blowout ~= "off" then
		st.on_blowout = "blink"
	end
end